'use strict';

/* jslint indent: 4 */

var async = require('async');

var hdb = require('./hdbAsync.js');
var hdiTables = require('./hdiTables.js');
var logger = require('./logger.js');
var utils = require('./utils.js');
var paths = require('./paths.js');

function selectSchema() {
    // return the first non-undefined argument
    for (var i = 0; i < arguments.length; ++i) {
        var schema = arguments[i];
        if (schema !== undefined) {
            return schema;
        }
    }
    return '';
}

function createSQLGrantorStrategy(client, tasks) {
    return {
        client: client,
        tasks: tasks,
        initialize: function() {
        },
        finalize: function() {
        },
        grantSystemPrivileges: function(privileges, grantee, grantable) {
            tasks.push(client.grantSystemPrivileges(privileges, grantee, grantable));
        },
        grantSchemaPrivileges: function(privileges, schema, grantee, grantable) {
            tasks.push(client.grantSchemaPrivileges(privileges, schema, grantee, grantable));
        },
        grantGlobalObjectPrivileges: function(privileges, name, type, grantee, grantable) {
            tasks.push(client.grantGlobalObjectPrivileges(privileges, name, type, grantee, grantable));
        },
        grantSchemaObjectPrivileges: function(privileges, schema, name, grantee, grantable) {
            tasks.push(client.grantObjectPrivileges(privileges, schema, name, grantee, grantable));
        },
        grantGlobalRoles: function(roles, grantee, grantable) {
            tasks.push(client.grantRoles(roles, grantee, grantable));
        },
        grantSchemaRoles: function(schema, roles, grantee, grantable) {
            tasks.push(client.grantSchemaRoles(schema, roles, grantee, grantable));
        }
    };
}

function createHDIContainerGrantorStrategy(client, tasks, grantor_schema) {
    return {
        client: client,
        tasks: tasks,
        grantor_schema: grantor_schema,
        container_roles: [],
        initialize: function() {
            this.container_roles = [];
        },
        finalize: function() {
            if (this.container_roles.length > 0) {
                // grant all container roles which were collected into container_roles
                var tempTablesForContainerRoles = [
                    ['#CONTAINER_ROLES_PARAMETERS', hdiTables.parameters.type],
                    ['#CONTAINER_ROLES', hdiTables.schemaRoles.type]
                ];

                tasks.push(client.createTmpTables(tempTablesForContainerRoles));

                tasks.push(client.bulkInsert('#CONTAINER_ROLES', hdiTables.schemaRoles.fields, this.container_roles));
                tasks.push(client.hdiGrantSchemaRoles(grantor_schema, '#CONTAINER_ROLES', '#CONTAINER_ROLES_PARAMETERS', client.hdiCheckResult('grant container roles', true)));

                tasks.push(client.dropTmpTables(tempTablesForContainerRoles));
            }
        },
        grantSystemPrivileges: function() {
            throw new Error('system privileges are not supported in case of an HDI container service binding');
        },
        grantSchemaPrivileges: function() {
            throw new Error('schema privileges are not supported in case of an HDI container service binding');
        },
        grantGlobalObjectPrivileges: function() {
            throw new Error('global object privileges are not supported in case of an HDI container service binding');
        },
        grantSchemaObjectPrivileges: function() {
            throw new Error('object privileges are not supported in case of an HDI container service binding');
        },
        grantSchemaRoles: function(schema, roles, grantee, grantable) {
            if (schema !== this.grantor_schema) {
                throw new Error('schema is not supported for schema roles in case of an HDI container service binding');
            }
            if (grantable) {
                throw new Error('schema roles with admin option are not supported in case of an HDI container service binding');
            }
            var container_roles = this.container_roles;
            roles.forEach(function(role) {
                container_roles.push([role, grantee]);
            });
        },
        grantGlobalRoles: function() {
            throw new Error('global roles are not supported in case of an HDI container service binding');
        }
    };
}

function createProcedureGrantorStrategy(client, tasks, grantor_procedure, grantor_procedure_schema) {
    return {
        client: client,
        tasks: tasks,
        grantor_procedure: grantor_procedure,
        grantor_procedure_schema: grantor_procedure_schema,
        grant_privileges: [],
        initialize: function() {
            this.privileges = [];
        },
        finalize: function() {
            if (this.grant_privileges.length > 0) {
                tasks.push(client.execute('CREATE LOCAL TEMPORARY COLUMN TABLE #PRIVILEGES (PRIVILEGE_TYPE NVARCHAR(128), PRIVILEGE_NAME NVARCHAR(256), OBJECT_SCHEMA NVARCHAR(256), OBJECT_NAME NVARCHAR(256), OBJECT_TYPE NVARCHAR(128), GRANTEE_SCHEMA NVARCHAR(256), GRANTEE_NAME NVARCHAR(256), GRANTABLE NVARCHAR(5))'));

                tasks.push(client.bulkInsert('#PRIVILEGES', [ 'PRIVILEGE_TYPE', 'PRIVILEGE_NAME', 'OBJECT_SCHEMA', 'OBJECT_NAME', 'OBJECT_TYPE', 'GRANTEE_SCHEMA', 'GRANTEE_NAME', 'GRANTABLE' ], this.grant_privileges));
                var schema_prefix = this.grantor_procedure_schema ? client.quotedSQLIdentifier(this.grantor_procedure_schema) + '.' : '';
                tasks.push(client.execute('CALL ' + schema_prefix + client.quotedSQLIdentifier(this.grantor_procedure) + '(#PRIVILEGES)'));

                tasks.push(client.execute('DROP TABLE #PRIVILEGES'));
            }
        },
        grantSystemPrivileges: function(privileges, grantee, grantable) {
            privileges.forEach(function (privilege) {
                this.grant_privileges.push([
                    'SYSTEM_PRIVILEGE',
                    privilege,
                    null,
                    null,
                    null,
                    null,
                    grantee,
                    grantable ? 'TRUE' : 'FALSE'
                ]);
            }.bind(this));
        },
        grantSchemaPrivileges: function(privileges, schema, grantee, grantable) {
            privileges.forEach(function (privilege) {
                this.grant_privileges.push([
                    'SCHEMA_PRIVILEGE',
                    privilege,
                    null,
                    schema,
                    null,
                    null,
                    grantee,
                    grantable ? 'TRUE' : 'FALSE'
                ]);
            }.bind(this));
        },
        grantGlobalObjectPrivileges: function(privileges, name, type, grantee, grantable) {
            privileges.forEach(function (privilege) {
                this.grant_privileges.push([
                    'GLOBAL_OBJECT_PRIVILEGE',
                    privilege,
                    null,
                    name,
                    type,
                    null,
                    grantee,
                    grantable ? 'TRUE' : 'FALSE'
                ]);
            }.bind(this));
        },
        grantSchemaObjectPrivileges: function(privileges, schema, name, grantee, grantable) {
            privileges.forEach(function (privilege) {
                this.grant_privileges.push([
                    'SCHEMA_OBJECT_PRIVILEGE',
                    privilege,
                    schema,
                    name,
                    null,
                    null,
                    grantee,
                    grantable ? 'TRUE' : 'FALSE'
                ]);
            }.bind(this));
        },
        grantSchemaRoles: function(schema, roles, grantee, grantable) {
            roles.forEach(function (role) {
                this.grant_privileges.push([
                    'SCHEMA_ROLE',
                    null,
                    schema,
                    role,
                    null,
                    null,
                    grantee,
                    grantable ? 'TRUE' : 'FALSE'
                ]);
            }.bind(this));
        },
        grantGlobalRoles: function(roles, grantee, grantable) {
            roles.forEach(function (role) {
                this.grant_privileges.push([
                    'GLOBAL_ROLE',
                    null,
                    null,
                    role,
                    null,
                    null,
                    grantee,
                    grantable ? 'TRUE' : 'FALSE'
                ]);
            }.bind(this));
        }
    };
}

function grantPrivileges(client, grantor_type, privileges, grantee, grantor_schema, grantor_remote, grantor_procedure, grantor_procedure_schema, cb) {
    try {
        var tasks = [];

        var grantorStrategy;
        if (grantor_type === 'hdi') {
            grantorStrategy = createHDIContainerGrantorStrategy(client, tasks, grantor_schema);
        } else if (grantor_type === 'procedure') {
            grantorStrategy = createProcedureGrantorStrategy(client, tasks, grantor_procedure, grantor_procedure_schema);
        } else {
            grantorStrategy = createSQLGrantorStrategy(client, tasks);
        }

        grantorStrategy.initialize();

        // the rule for schema selection is:
        // 1. obj.schema
        // 2. obj.reference, only used for schema_privileges
        // 3. grantor_schema

        if (privileges.roles) {
            // roles is supported for backwards compatibility
            // string format: "roles": [ "X", "Y" ]
            // object format: "roles": [ { "names": [ "X", "Y" ], "roles": [ "X", "Y" ], "roles_with_admin_option": [ "A", "B" ] } ]
            var string_format_roles = [];
            privileges.roles.forEach(function(obj) {
                if (typeof obj === 'string') {
                    string_format_roles.push(obj);
                } else {
                    if (obj.names) {
                        grantorStrategy.grantGlobalRoles(obj.names, grantee, false);
                    }
                    if (obj.roles) {
                        grantorStrategy.grantGlobalRoles(obj.roles, grantee, false);
                    }
                    if (obj.roles_with_admin_option) {
                        grantorStrategy.grantGlobalRoles(obj.roles_with_admin_option, grantee, true);
                    }
                }
            });

            if (string_format_roles.length > 0) {
                grantorStrategy.grantGlobalRoles(string_format_roles, grantee, false);
            }
        }

        if (privileges.global_roles) {
            // global_roles is supported for symmetry with hdbrole
            // string format: "global_roles": [ "X", "Y" ]
            // object format: "global_roles": [ { "names": [ "X", "Y" ], "roles": [ "X", "Y" ], "roles_with_admin_option": [ "A", "B" ] } ]
            var string_format_global_roles = [];
            privileges.global_roles.forEach(function(obj) {
                if (typeof obj === 'string') {
                    string_format_global_roles.push(obj);
                } else {
                    if (obj.names) {
                        grantorStrategy.grantGlobalRoles(obj.names, grantee, false);
                    }
                    if (obj.roles) {
                        grantorStrategy.grantGlobalRoles(obj.roles, grantee, false);
                    }
                    if (obj.roles_with_admin_option) {
                        grantorStrategy.grantGlobalRoles(obj.roles_with_admin_option, grantee, true);
                    }
                }
            });

            if (string_format_global_roles.length > 0) {
                grantorStrategy.grantGlobalRoles(string_format_global_roles, grantee, false);
            }
        }

        if (privileges.system_privileges) {
            // string format: "system_privileges": [ "X", "Y" ]
            // object format: "system_privileges": [ { "privileges": [ "X", "Y" ], "privileges_with_admin_option": [ "A", "B" ] } ]
            var string_format_privileges = [];
            privileges.system_privileges.forEach(function(obj) {
                if (typeof obj === 'string') {
                    string_format_privileges.push(obj);
                } else {
                    if (obj.privileges) {
                        grantorStrategy.grantSystemPrivileges(obj.privileges, grantee, false);
                    }
                    if (obj.privileges_with_admin_option) {
                        grantorStrategy.grantSystemPrivileges(obj.privileges_with_admin_option, grantee, true);
                    }
                }
            });

            if (string_format_privileges.length > 0) {
                grantorStrategy.grantSystemPrivileges(string_format_privileges, grantee, false);
            }
        }

        if (privileges.schema_privileges) {
            privileges.schema_privileges.forEach(function(obj) {
                if (obj.privileges) {
                    grantorStrategy.grantSchemaPrivileges(obj.privileges, selectSchema(obj.schema, obj.reference, grantor_schema), grantee, false);
                }
                if (obj.privileges_with_grant_option) {
                    grantorStrategy.grantSchemaPrivileges(obj.privileges_with_grant_option, selectSchema(obj.schema, obj.reference, grantor_schema), grantee, true);
                }
            });
        }

        if (privileges.object_privileges) {
            privileges.object_privileges.forEach(function(obj) {
                if (obj.privileges) {
                    grantorStrategy.grantSchemaObjectPrivileges(obj.privileges, selectSchema(obj.schema, grantor_schema), obj.name, grantee, false);
                }
                if (obj.privileges_with_grant_option) {
                    grantorStrategy.grantSchemaObjectPrivileges(obj.privileges_with_grant_option, selectSchema(obj.schema, grantor_schema), obj.name, grantee, true);
                }
            });
        }

        if (privileges.global_object_privileges) {
            privileges.global_object_privileges.forEach(function(obj) {
                var name = obj.name;
                if (typeof name === 'undefined' && obj.type === 'REMOTE SOURCE') {
                    name = grantor_remote;
                }

                if (obj.privileges) {
                    grantorStrategy.grantGlobalObjectPrivileges(obj.privileges, name, obj.type, grantee, false);
                }
                if (obj.privileges_with_grant_option) {
                    grantorStrategy.grantGlobalObjectPrivileges(obj.privileges_with_grant_option, name, obj.type, grantee, true);
                }
            });
        }

        if (privileges.schema_roles) {
            // string format: "schema_roles": [ "X", "Y" ]
            // object format: "schema_roles": [ { "names": [ "X", "Y" ], "roles": [ "X", "Y" ], "roles_with_admin_option": [ "A", "B" ] } ]
            var string_format_schema_roles = [];
            privileges.schema_roles.forEach(function(obj) {
                if (typeof obj === 'string') {
                    string_format_schema_roles.push(obj);
                } else {
                    if (obj.names) {
                        grantorStrategy.grantSchemaRoles(selectSchema(obj.schema, grantor_schema), obj.names, grantee, false);
                    }
                    if (obj.roles) {
                        grantorStrategy.grantSchemaRoles(selectSchema(obj.schema, grantor_schema), obj.roles, grantee, false);
                    }
                    if (obj.roles_with_admin_option) {
                        grantorStrategy.grantSchemaRoles(selectSchema(obj.schema, grantor_schema), obj.roles_with_admin_option, grantee, true);
                    }
                }
            });

            if (string_format_schema_roles.length > 0) {
                grantorStrategy.grantSchemaRoles(grantor_schema, string_format_schema_roles, grantee, false);
            }
        }

        if (privileges.container_roles) {
            grantorStrategy.grantSchemaRoles(grantor_schema, privileges.container_roles, grantee, false);
        }

        grantorStrategy.finalize();

        async.series(tasks, cb);
    } catch (err) {
        cb(err);
    }
}

function grantUsers(privileges, grantor, fileName, creds, targetCreds, container, grantee, cb) {
    try {
        var tasks = [];
        var grantor_type;

        if (creds.type !== undefined) {
            // if the grantor object contains a type field, then use this for selecting the grantor's type
            if (creds.type === 'hdi' || creds.type === 'sql' || creds.type === 'procedure' || creds.type === 'ignore') {
                grantor_type = creds.type;
            } else {
                throw new Error("unknown grantor type, known grantor types are 'hdi', 'sql', 'procedure', 'ignore'");
            }
        } else {
            // otherwise, fallback to old auto-sensing for sql and hdi types
            grantor_type = 'sql';
            if (creds.hdi_user) {
                grantor_type = 'hdi';
            }
        }

        var host = creds.host;
        var port = creds.port;
        var hosts = creds.db_hosts;
        var certificate = creds.certificate;

        if (!Array.isArray(hosts) && host === undefined && port === undefined && certificate === undefined) {
            // host, port, certificate are optional in the service credentials, fallback to target credentials if undefined
            host = targetCreds.host;
            port = targetCreds.port;
            hosts = targetCreds.db_hosts;
            certificate = targetCreds.certificate;
        }

        var user = creds.user;
        var password = creds.password;
        if (grantor_type === 'hdi') {
            user = creds.hdi_user;
            password = creds.hdi_password;
        }

        logger.log('  Using service "' + grantor + '" of type "' + grantor_type + '"');

        if (grantor_type === 'ignore') {
            cb(null);
            return;
        }

        var client = hdb(host, port, user, password, certificate, hosts);

        tasks.push(client.connect());
        if (creds.schema && grantor_type !== 'procedure') {
            tasks.push(client.setSchema(creds.schema));
        }

        if (privileges.object_owner) {
            tasks.push(function(cb) {
                grantPrivileges(client, grantor_type, privileges.object_owner, container, creds.schema, creds.remote, creds.procedure, creds.procedure_schema, cb);
            });
        }

        if (privileges.application_user) {
            tasks.push(function(cb) {
                grantPrivileges(client, grantor_type, privileges.application_user, grantee, creds.schema, creds.remote, creds.procedure, creds.procedure_schema, cb);
            });
        }

        tasks.push(client.disconnect());

        async.series(tasks, function(err, results) {
            client.end();

            if (err) { // add information about grantor service & underlying user
                err.message += '\ngrantor service: "' + grantor + '", type: "' + grantor_type + '", user: "' + user + '"';
                if (grantor_type === 'hdi') {
                    err.message += ' (hdi_user)';
                }
                if (grantor_type === 'procedure') {
                    err.message += ', procedure: "' + creds.procedure + '"';
                    if (creds.procedure_schema) {
                        err.message += ', procedure_schema: "' + creds.procedure_schema + '"';
                    }
                }

                err.message += '\nfile name: ' + fileName;
            }

            cb(err, results);
        });
    } catch (err) {
        cb(err);
    }
}

function grantFile(services, root, fileName, container, grantee, cb) {
    try {
        var
            file,
            tasks = [];

        fileName = paths.join(root, paths.clientPath(fileName));

        file = utils.readJSONFile(fileName);

        var targetCreds = services.getTargetCreds();

        Object.keys(file).forEach(function(grantor) {
            var creds;
            try {
                creds = services.getCreds(grantor);
            } catch (err) {
                cb(err);
                return;
            }

            logger.trace('grantor', file[grantor]);

            tasks.push(function(cb) {
                grantUsers(file[grantor], grantor, fileName, creds, targetCreds, container, grantee, cb);
            });

        });

        async.series(tasks, cb);
    } catch (err) {
        cb(err);
    }
}

// grant target container oo and target container access role
exports.grant = function(options, services, content, container, grantee, cb) {
    try {
        var
            tasks = [],
            fileNames;

        logger.logTimerInit('grants-files', "Processing grants files...");

        fileNames = content.synonymGrantorFiles();
        logger.trace('grants files:', fileNames);

        fileNames.forEach(function(fileName) {
            if (options.workingSet.matchesPath(fileName)) {
                tasks.push(logger.logfn(' Processing "' + fileName + '"...'));
                tasks.push(function(cb) {
                    grantFile(services, content.root, fileName, container, grantee, cb);
                });
                tasks.push(logger.logfn(' Processing "' + fileName + '"... ok'));
            }
        });

        tasks.push(logger.logfnTimerDelta('grants-files', "Processing grants files... ok"));

        async.series(tasks, function(err, results) {
            cb(err, {
                task: 'synonym',
                results: results
            });
        });
    } catch (err) {
        cb(err);
    }
};
